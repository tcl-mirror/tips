TIP:            10000
Title:          Dummy Proposal for Testing Editing Interfaces
Version:        $Revision: 1.170 $
Author:         Don Porter <dgp@users.sourceforge.net>
Author:         <nobody@nowhere.com>
Author:         Andreas Kupries <akupries@westend.com>
Author:         Donal K. Fellows <fellowsd@cs.man.ac.uk>
Author:         Andreas Kupries <a.kupries@westend.com>
Author:         <dgp@user.sourceforge.net>
Author:         Richard Suchenwirth <richard.suchenwirth@kst.siemens.de>
Author:         Kevin B KENNY <kennykb@acm.org>
Author:         Jeff Hobbs <hobbs@users.sourceforge.net>
Author:         Test User <test@example.com>
Author:         New User <newbie@example.com>
Author:         Working User <thisworks@example.com>
Author:         Vince Darley <vincentdarley@users.sourceforge.net>
Author:         Fabrice Pardo <Fabrice.Pardo@l2m.cnrs.fr>
Author:         Don Porter <dgp@users.sf.net>
Author:         Donal K. Fellows <donal.k.fellows@man.ac.uk>
Author:         Joe Mistachkin <joe@mistachkin.com>
Author:         Donal K. Fellows <donal.k.fellows@manchester.ac.uk>
State:          Draft
Type:           Informative
Vote:           Pending
Created:        03-Dec-2000
Post-History:   

~ Abstract

This proposal has no content.  It exists only to provide a document
on which testing of and practice using of the TIP editing interfaces
can take place.

~ Testing

...edits through the web.

~ Copyright

This document has been placed in the public domain.

~ Abstract

This TIP introduces the ability to quickly and safely cancel a script within a specified interpreter from any thread in the process.

~ Rationale

Currently, once the evaluation of a script has been initiated it will do one of the following:

 * run to completion,

 * run until it encounters an uncaught error,

 * run until it exceeds a pre-determined limit as specified in [143], or

 * run indefinitely.

In the final case above, neither the host application nor an interactive user have any recourse to terminate the script.

There are many situations for which it is absolutely necessary to be able to cancel a running script without its cooperation and without setting an arbitrary limit on the amount of time it can run ([143]).  This is especially true in a multi-threaded application embedding environment, or where a user interface is present.

 1. In the case where the completion time for a script is unknown, non-existant, or non-deterministic a user may want or need to terminate the script prematurely.

 1. When evaluating an untrusted - or marginally trusted - script in either a safe or standard interpreter, there is a risk that the script might never terminate. In such a situation it is not reasonable to forcibly terminate the thread or the entire process. 

 > 1. Forcibly terminating a thread prevents Tcl and Tk from cleaning up their thread-specific memory and resources.

 > 1. The host application may suffer similar memory and resource leaks as well as other serious side-effects that may corrupt data, prevent other threads from properly synchronizing, or leave the process in an unknown and unrecoverable state.

 > 1. For an interactive host application valuable work may be lost without providing an opportunity to save pending modifications. Even in the absence of modifications the host application might have been holding locks that left unreleased would prevent other processes and users from using important resources.

The basic building blocks needed for any scripting language to seamlessly integrate with an enterprise-ready host application are:

 * Engine Initialization 

 * Evaluation

 * Extensibility

 * Cancellation

 * Engine Finalization

Tcl now provides full support for all of the above except script cancellation. [143] allows for scripts to be prematurely terminated after reaching resource limits that were pre-arranged by the host application. However, this only handles terminating scripts based on a narrow set of deterministic criteria. Full support would require the ability to immediately and unconditionally terminate the evaluation of a script without adversely affecting the execution environment of the host application. In addition the following issues must be addressed:

 * Scripts being evaluated in nested slave interpreters.

 * Interaction with third-party extensions.

 * Safely useable by abitrary threads.

Several other mainstream scripting engines (e.g. JavaScript, Microsoft Active Scripting, etc.) currently provide this capability to cancel the evaluation of a script. This TIP proposes an implementation that would bring this necessary aspect of application integration to Tcl. This must be implemented in the core, because access to and modification of internal Tcl functions and data structures is required.

~ Specification

A new '''cancel''' script command will be added, as follows:

 > '''cancel''' ?'''-unwind'''? ?'''--'''? ?''path''? ?''result''?

This command cancels the script being evaluated in an interpreter.

~~ Arguments

 * ''-unwind''

 > * Optional. Without ''-unwind'', the evaluation stack for the interpreter is unwound until an enclosing '''catch''' command is found or there are no further invocations of the interpreter left on the call-stack.

 > * With ''-unwind'', the evaluation stack for the interpreter is unwound without regard to any intervening '''catch''' command until there are no further invocations of the interpreter left on the call-stack.

 * ''--''

 > * Marks the end of options.  The argument following this one will be treated as ''path'' even if it starts with a "-".

 * ''path''

 > * Optional. If not supplied, the current interpreter is assumed; otherwise, the interpreter specified by ''path'' is used.

 * ''result''

 > * Optional. If not supplied, a default error message is left in the result of the interpreter; otherwise, the result specified by ''result'' is used.

~~ Behavior

When a script is canceled, the following occur:

 * The CANCELED flag, and possibly the TCL_CANCEL_UNWIND flag, are set in the interpreter to mark the evaluation in progress as having been canceled.

 * The currently executing command/script in the interpreter is made to return with code ''TCL_ERROR''.  (This is superior to using a novel return code, as third-party extensions are usually far better at handling error cases!)

 * The '''catch''' command will only catch errors if the interpreter containing it does not have the ''TCL_CANCEL_UNWIND'' flag set.

 * Additional trips through the internal loops of the '''after''', '''vwait''', '''update''' and '''tkwait''' commands will not proceed with the ''CANCELED'' or ''TCL_CANCEL_UNWIND'' flags set.  (Extensions can find this information out by using ''Tcl_Canceled''; see below.)

 * Once the execution unwinds out of the interpreter, so that no further invocations of the interpreter are left on the call-stack, both of the script cancellation related flags are reset.

 * If there are no invocations of the interpreter on the call-stack when ''Tcl_CancelEval'' or '''cancel''' are called, then the next script to be evaluated will be preemptively canceled.

~~ Notes

 * Going forward, all "long running commands" in the Tcl/Tk core should make every effort to comply with the script cancellation functionality by calling ''Tcl_Canceled'' at times when it is appropriate to abort processing.

 * Extensions can optionally check if they should abort processing by calling ''Tcl_Canceled''.

~ C API

~~ Constants

 * ''TCL_CANCEL_UNWIND'' - New evalFlag bit that applies to ''Tcl_CancelEval'' and ''Tcl_Canceled''.

 > * When used in ''flags'' for ''Tcl_CancelEval'', the evaluation stack for ''interp'' is unwound without regard to any intervening '''catch''' command until there are no further invocations of ''interp'' left on the call-stack. When not set, the evaluation stack for the interpreter is unwound until an enclosing '''catch''' command is found or there are no further invocations of ''interp'' left on the call-stack.

 > * When used in ''flags'' for ''Tcl_Canceled'', checks if the script being evaluated has been canceled using the ''TCL_CANCEL_UNWIND'' flag (i.e. the evaluation stack for ''interp'' is being completely unwound).

 * ''TCL_LEAVE_ERR_MSG'' - Existing variable-related flag bit that applies to ''Tcl_Canceled'' only.

 > * When used in ''flags'' for ''Tcl_Canceled'', an error message will be left in the result of ''interp'' if the script being evaluated has been canceled.

~~ Functions

 * int '''Tcl_CancelEval'''(Tcl_Interp *''interp'', Tcl_Obj *''resultObjPtr'', ClientData ''clientData'', int ''flags'')

 > Initiates cancellation of the script being evaluated in ''interp''.  Returns a standard Tcl result. If ''resultObjPtr'' is NULL, a default error message will be left in the result of ''interp'' indicating that the script was canceled or unwound. If ''resultObjPtr'' is not NULL, it will be used verbatim to supply the result of ''interp''. The ''clientData'' is reserved for future use and must be zero. This function may be called from any thread in the process, regardless of which thread created ''interp''.

 * int '''Tcl_Canceled'''(Tcl_Interp *''interp'', int ''flags'')

 > Checks if the script being evaluated in ''interp'' has been canceled.  Returns a standard Tcl result (i.e. ''TCL_ERROR'' if the script being evaluated has been canceled). This function should only be called from the thread which created ''interp''; otherwise, its behavior is undefined.

~ Reference Implementation

A reference implementation of this TIP is available [http://sf.net/tracker/?func=detail&aid=1499394&group_id=10894&atid=310894].

~ Copyright

This document has been placed in the public domain.
