TIP:            457
Title:          Add Support for Named Arguments
Version:        $Revision: 1.13 $
Author:         Mathieu Lafon <mlafon@gmail.com>
Author:         Andreas Leitgeb <avl@logic.at>
State:          Draft
Type:           Project
Vote:           Pending
Created:        21-Nov-2016
Post-History:   
Keywords:       Tcl,procedure,argument handling
Tcl-Version:    8.7

~ Abstract

This TIP proposes an enhancement of the Tcl language to support named
arguments when calling a procedure.

~ Rationale

The naming of arguments to procedures is a computer language feature which
allow developers to specify the name of an argument when calling a function.
This is especially useful when dealing with arguments with default values, as
this does not require to specify all previous arguments when only one argument
is required to be specified.

As such, this is a commonly requested feature by Tcl developers, who have
created various code snippets [http://wiki.tcl.tk/10702] to simulate it. These
snippets have drawbacks: not intuitive for new users, require to add extra
code at the start of each procedure, no standard on the format to use, few
errors handling, etc.

After discussing various possibilities with the community, it has been
decided to extend the argument specification of the '''proc''' command
and allow users to define options on arguments. This can be used to
support named arguments but also allow additional enhancements:
flag arguments and pass-by-name (''upvar'').

The others possibilities discussed are detailed in the ''Discussion''
section at the end of the document.

~ Specification

The ''proc'' documentation currently define argument specifiers as a list
of one or two fields where the first field is the name of the argument and
the optional second field is its default value.

The proposed modification is to support an alternate specifier format using
an odd size list where the first field is also the name of the argument,
followed by a paired list of options and their values.

~~ Available options

The following options are currently defined:

 * '''-default <val>''' defines the default value of the argument.

|% proc p { { a -default {} } } { puts [list a $a ] }
|% p
|a {}
|% p foo
|a foo

 * '''-name <trunk>''' defines the argument to be a named argument.
   To provide a name for this argument, a call must use the <trunk>
   word prefixed by a single dash, followed by the value (unless the
   '''-value''' option has also be used, see below).

|% proc p { { v -name var } } { puts [list v $v] }
|% p -var 1
|v 1

 * '''-value <preset>''' defines that the variable is to be asigned
   the <preset> value when defined. This option can only be used with
   both the '''-default''' and '''-name''' options. In that case, the
   call must only use the <trunk> word prefixed by a single dash.

|% proc p { { dbg -default 0 -name debug -value 1 } } { puts [list dbg $dbg] }
|% p
|dbg 0
|% p -debug
|dbg 1

 * '''-upvar <outername''' defines that the local argument will refer
   to a variable defined in the parent context. This is used to pass a
   variable by name, similar to what is done when using the ''upvar''
   command. If <outername> is not an empty string, a new local variable,
   named <outername>, will be created with the name of the variable given
   in the call.

|% proc p { { v -upvar name } } { incr v; puts [list $name "incremented"] }
|% set a 2
|2
|% p a
|a incremented
|% set a
|3

 * '''-names <names-list>''' defines the argument to be a named argument
   which can be called using different names. In that case, <names-list>
   is a list where each element is also a list containing the previously
   defined options amongst '''-name''' (which is required), '''-value'''
   and '''-upvar'''.

|% proc p \
|    { { l -default 3 -names {{ -name level } { -name high -value 9 }} } } \
|    { puts [list l $l] }
|% p
|l 3
|% p -level 6
|l 6
|% p -high
|l 9

Further options may be added in future TIPs.

~~ Named arguments

The following rules define how named arguments are expected to be specified
when calling a procedure:

 * Named arguments must always be specified using their name, they can't be
   specified as positional arguments.

|% proc p { {a -name A} } { puts [list a] }
|% p aa
|wrong args: "aa" is not an known named argument
|% p -A aa
|a aa

 * A group of contiguous named arguments are handled together and are not
   required to be specified in the same order as defined.

|% proc p { {a -name A} {b -name B} } { puts [list a $a b $b] }
|% p -B bb -A aa
|% a aa b bb

 * The special ''--'' (double dash) end-of-options marker can be used to
   end the handling of a group of contigous named arguments. Remaining
   option will then be assigned to following positional arguments.

|% proc p { {o -name opt} args } { puts [list o $o args $args] }
|% p -opt O -- 1 2
|o O args {1 2}

 * A named argument must only be declared once, doing otherwise will raise
   an error. This is especially true for arguments with alternate names defined
   with the '''-names''' option.

|% proc p \
|    { { l -default 3 -names {{ -name level } { -name high -value 9 }} } } \
|    { puts [list l $l] }
|% p -level 6 -high
|wrong args: "-level" and "-high" can't be used together

~ Implementation

This document proposes the following changes to the Tcl core:

 1. Modification of the '''proc''' command to handle the new arguments
    specification format.

 2. Modification of how arguments are initialized, mostly in
    ''InitArgsAndLocals''.

 3. Update documentation in doc/proc.n;

 4. Add dedicated tests in tests/proc.test or an other dedicated file.

~~ Reference Implementation

The reference implementation is in progress and not yet publicly available.

The code is licensed under the BSD license.

~ Discussion

This section details the envisioned solutions for this feature, which can be
divided in four groups.

~~ Calling convention

Named arguments can be defined using a convention to specify them, without
requiring any change in the existing Tcl parser.

The convention can be to use the well-known ''-option value'' syntax:

|% myproc A -optB BB 

Or a more specific one to lessen the risk of collision with an existing
usage:

|% myproc A { @optB -> BB }

The drawbacks of this solution is that it may break existing code which
share a similar convention and that it is not possible to detect and
prevent its usage in non Tcl-pure procedures.

~~ Specific format

To avoid the drawbacks of the calling convention, it is possible to define
and use a specific format which is currently not accepted by the Tcl parser.

|% myproc "some pos arg" {optC}=foo {optB}={5 5}

This solution was the first proposal and has received mitigated feelings
from the Tcl community.

The drawbacks of this solution is that it is too far from the common
usage of the Tcl language and Tcl community and that it require important
changes in various parts of Tcl core.

An other variation of this solution, with a syntax more common to the usage
of the Tcl community, has also be proposed and can be used with argument
expansion:

|% myproc "some pos arg" {**}{optC foo optB {5 5}}

|% set args [dict create optC foo optB {5 5}]
|% myproc "some pos arg" {**}$args

~~ Dedicated builtin command

A dedicated command can be used to handle the named arguments, using an
''-option value'' syntax, before calling the target procedures with all
arguments correctly prepared.

|% call -opts myproc -optC foo -optB {5 5} -- "some pos arg"

This solution was the second solution proposed and an implementation
is available at [https://github.com/mlafon/tcl/tree/457-CALL-CMD].

~~ Modification in how proc are defined

Tcl-pure procedures can be defined in a way which state that the procedure
will automatically handle ''-option value'' arguments.

|% proc -np myproc { varA { optB defB } { optC defC } { optD defD } args } {
|  ..
|}
|% myproc -optC foo -optB {5 5} -- "some pos arg"

An other possibility is to support options on arguments and allow name
specification:

|% proc myproc { varA { optB defB {-name -B} } args } {
|   ..
|} 
|% myproc a -B b zz

This is the currently proposed solution in this TIP. It requires the
procedures to be modified but allow additional features.

~ Copyright

This document has been placed in the public domain.
