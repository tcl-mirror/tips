TIP:            457
Title:          Add Support for Named Arguments
Version:        $Revision: 1.11 $
Author:         Mathieu Lafon <mlafon@gmail.com>
Author:         Andreas Leitgeb <avl@logic.at>
State:          Draft
Type:           Project
Vote:           Pending
Created:        21-Nov-2016
Post-History:   
Keywords:       Tcl,procedure,argument handling
Tcl-Version:    8.7

~ Abstract

This TIP proposes an enhancement of the Tcl language to support named
arguments when calling a procedure.

~ Rationale

The naming of arguments to procedures is a computer language feature which
allow developers to specify the name of an argument when calling a function.
This is especially useful when dealing with arguments with default values, as
this does not require to specify all previous arguments when only one argument
is required to be specified.

As such, this is a commonly requested feature by Tcl developers, who have
created various code snippets [http://wiki.tcl.tk/10702] to simulate it. These
snippets have drawbacks: not intuitive for new users, require to add extra
code at the start of each procedure, no standard on the format to use, few
errors handling, etc.

After discussing various possibilities with the community, it has been
decided to extend the argument specification of the '''proc''' command
and allow users to define options on arguments. This can be used to
support named arguments but also allow additional enhancements:
flag arguments and pass-by-name (''upvar'').

The others possibilities discussed are detailed in the ''Discussion''
section at the end of the document.

~ Specification

The argument specification is modified so that a third optional field
may be added after the name of the argument and its default value.
This third field is a list, possibly empty, containing options for
that argument. The following options are currently defined:

 * '''-name <argname>''' specify how the argument can be specified
   as a named argument when calling the procedure.

 * '''-flag <value>''' specify that the argument's value can be either
   its default value or the specified value. The '''-name <argname>'''
   option is required, and ''<argname>'' is used, without additional
   value, to set the specified value to the argument.

 * '''-upvar''' specify that the argument will refer to a variable in
   the parent context. This is used to pass a variable by name, similar
   to what is done when using the '''upvar''' command.

~~ Examples

|% proc myproc { a { b B { -name /b } } { c C { -name /c } } args } {
|  puts "a:$a, b:$b, c:$c, args:$args"
|}
|
|% myproc A /c valC xyz
|a:A, b:B, c:valC, args:xyz
|
|% dict set myargs /b {0 1}
|% dict set myargs /c C2
|% myproc AA {*}$myargs
|a:AA, b:0 1, c:C2, args:
|
|% proc myproc { { ena 0 { -name -enable -flag 1 } } } [
|  puts "enable: $ena"
|}
|
|% myproc
|enable: 0
|% myproc -enable
|enable: 1
|
|% proc add3 { { x {} {-upvar} } } { set x [expr {$x + 3}] }
|% set a 1
|1
|% add3 a
|3

~~ Rules

The following rules define how the options on arguments specification are
expected to work:

 * The options are defined, as a list, in the third field of the argument.
   The list can be empty and must only contains known and valid options.
   Specifying an unknown option will raise an error.

 * If named arguments are defined (using the '''-name <argname>''' option),
   all arguments with default value must be declared as named arguments.
   Doing otherwise will raise an error. This is required as it is not
   possible to distinguish an argument name from an argument value. 

 * It is not possible to specify named arguments as positional arguments,
   the '''-argname <value>''' or '''-flagname''' must always be used.

 * It is possible to have non-default positional arguments before named
   arguments. When calling the procedure, these positional arguments must
   be declared first.

 * It is possible to have non-default positional arguments (or the special
   ''args'' argument) after named arguments. The first value which does not
   match the name of a named argument, ends the named arguments handling and
   will be affected to the next non-default positional argument. It should
   be noted that affecting the name of a named argument to this argument is
   not possible.

 * The order of '''--argname <value>''' pairs or '''-flagname''' is not
   important, they are not required to be declared in the same order than
   in the procedure.

 * A named argument must only be declared once, doing otherwise will raise
   an error.

 * When using the '''-flag <value>''' option, the '''-name <argname>''' is
   required, doing otherwise will raise an error.

 * It is not possible to define a default value with the '''-upvar''' option.
   The second field of the argument definition must still be present and must
   be defined as an empty list by specification. Doing otherwise will raise
   an error.

 * It is possible to use the '''-upvar''' option with the '''-name <argname>'''
   option but the argument must always be defined when calling the procedure.

 * It is not possible to use the '''-upvar''' option with the '''-flag
   <value>''' option.

 * The value specified for an upvar argument must be the name of an existing
   variable in the caller's procedure frame. If this is not the case, an
   error will be raised.

~ Implementation

This document proposes the following changes to the Tcl core:

 1. Modification of the '''proc''' command to handle the new arguments
    specification format.

 2. Modification of how arguments are initialized, mostly in
    ''InitArgsAndLocals''.

 3. Update documentation in doc/proc.n;

 4. Add dedicated tests in tests/proc.test or an other dedicated file.

~~ Reference Implementation

The reference implementation is in progress and not yet publicly
available.

The code is licensed under the BSD license.

~ Discussion

This section details the envisioned solutions for this feature, which can be
divided in four groups.

~~ Calling convention

Named arguments can be defined using a convention to specify them, without
requiring any change in the existing Tcl parser.

The convention can be to use the well-known ''-option value'' syntax:

|% myproc A -optB BB 

Or a more specific one to lessen the risk of collision with an existing
usage:

|% myproc A { @optB -> BB }

The drawbacks of this solution is that it may break existing code which
share a similar convention and that it is not possible to detect and
prevent its usage in non Tcl-pure procedures.

~~ Specific format

To avoid the drawbacks of the calling convention, it is possible to define
and use a specific format which is currently not accepted by the Tcl parser.

|% myproc "some pos arg" {optC}=foo {optB}={5 5}

This solution was the first proposal and has received mitigated feelings
from the Tcl community.

The drawbacks of this solution is that it is too far from the common
usage of the Tcl language and Tcl community and that it require important
changes in various parts of Tcl core.

An other variation of this solution, with a syntax more common to the usage
of the Tcl community, has also be proposed and can be used with argument
expansion:

|% myproc "some pos arg" {**}{optC foo optB {5 5}}

|% set args [dict create optC foo optB {5 5}]
|% myproc "some pos arg" {**}$args

~~ Dedicated builtin command

A dedicated command can be used to handle the named arguments, using an
''-option value'' syntax, before calling the target procedures with all
arguments correctly prepared.

|% call -opts myproc -optC foo -optB {5 5} -- "some pos arg"

This solution was the second solution proposed and an implementation
is available at [https://github.com/mlafon/tcl/tree/457-CALL-CMD].

~~ Modification in how proc are defined

Tcl-pure procedures can be defined in a way which state that the procedure
will automatically handle ''-option value'' arguments.

|% proc -np myproc { varA { optB defB } { optC defC } { optD defD } args } {
|  ..
|}
|% myproc -optC foo -optB {5 5} -- "some pos arg"

An other possibility is to support options on arguments and allow name
specification:

|% proc myproc { varA { optB defB {-name -B} } args } {
|   ..
|} 
|% myproc a -B b zz

This is the currently proposed solution in this TIP. It requires the
procedures to be modified but allow additional features.

~ Copyright

This document has been placed in the public domain.
