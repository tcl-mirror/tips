TIP:            457
Title:          Add Support for Named Arguments
Version:        $Revision: 1.15 $
Author:         Mathieu Lafon <mlafon@gmail.com>
Author:         Andreas Leitgeb <avl@logic.at>
State:          Draft
Type:           Project
Vote:           Pending
Created:        21-Nov-2016
Post-History:   
Keywords:       Tcl,procedure,argument handling
Tcl-Version:    8.7

~ Abstract

This TIP proposes an enhancement of the Tcl language to support named
arguments when calling a procedure.

~ Rationale

The naming of arguments to procedures is a computer language feature which
allow developers to specify the name of an argument when calling a function.
This is especially useful when dealing with arguments with default values, as
this does not require to specify all previous arguments when only one argument
is required to be specified.

As such, this is a commonly requested feature by Tcl developers, who have
created various code snippets [http://wiki.tcl.tk/10702] to simulate it. These
snippets have drawbacks: not intuitive for new users, require to add extra
code at the start of each procedure, no standard on the format to use, few
errors handling, etc.

After discussing various possibilities with the community, it has been
decided to extend the argument specification of the '''proc''' command
and allow users to define options on arguments. This can be used to
support named arguments but also add additional enhancements:
flag arguments and pass-by-name (''upvar'') arguments.

The others possibilities discussed are detailed in the ''Discussion''
section at the end of the document.

~ Specification

The ''proc'' documentation currently define argument specifiers as a list
of one or two fields where the first field is the name of the argument and
the optional second field is its default value.

The proposed modification is to support an alternate specifier format where
the first field is also the name of the argument, followed by a paired list
of options and their values. This format does not prevent the original format
to be used as they can be easily distinguished: the new format uses an
odd size list with a minimal size of three fields.

~~ Available options

The following options are currently defined:

 * '''-default <val>''' defines the default value of the argument.
   When used, it must be specified before any '''-name''' option.

|% proc p { { a -default {} } } { list a $a }
|% p
|a {}
|% p foo
|a foo

 * '''-name <trunk>''' defines the argument to be a named argument.
   To provide a name for this argument, a call must use the <trunk>
   word prefixed by a single dash, followed by the value (unless the
   '''-value''' option has also be used, see below). Several '''-name'''
   options can be specified for the same argument.

|% proc p { { v -name var } } { list v $v }
|% p -var 1
|v 1

 * '''-value <preset>''' defines that the variable is to be assigned
   the <preset> value when defined. This option can only be used with
   the '''-name''' options. In that case, the call must only use the
   <trunk> word of the previously specified '''-name''' option prefixed
   by a single dash.

|% proc p { { dbg -default 0 -name debug -value 1 } } { list dbg $dbg }
|% p
|dbg 0
|% p -debug
|dbg 1

 * '''-upvar <outername>''' defines that the local argument will refer
   to a variable defined in the parent frame. This is used to pass a
   variable by name, similar to what is done when using the ''upvar''
   command. If <outername> is not an empty string, a new local variable,
   named <outername>, will be created with the name of the variable given
   in the call. The '''-upvar''' option can be used with or without
   a '''-name''' option. When used with a '''-name''' option, it must
   be specified after and is then related to that name.

|% proc p { { v -upvar name } } { incr v; list $name "incremented" }
|% set a 2
|2
|% p a
|a incremented
|% set a
|3
|% proc p { { v -name var -upvar name } } { incr v; list $name "incremented" }
|% p -var a
|a incremented
|% set a
|4

Further options may be added in future TIPs.

~~ Named arguments

The following rules define how named arguments are expected to be specified
when calling a procedure:

 * Named arguments must always be specified using their name, they can't be
   specified as positional arguments.

|% proc p { {a -name A} } { list a $a }
|% p aa
|wrong # args: should be "p |-A a|"
|% p -A aa
|a aa

 * When several '''-name''' options are specified for the same argument,
   only one is required to be used in the proc call, unless a default
   value is also specified.

|% proc p { { l -name level -name high -value 9 } } { list l $l }
|% p -level 6
|l 6
|% p -high
|l 9

 * A group of contiguous named arguments are handled together and are not
   required to be specified in the same order as defined.

|% proc p { {a -name A} {b -name B} } { list a $a b $b }
|% p -B bb -A aa
|% a aa b bb

 * The handling of a group of contiguous named arguments (which can be
   only one argument) is ended on the first argument not starting with
   a dash or by using the special ''--'' end-of-options marker. Remaining
   arguments will then be assigned to following positional arguments.

|% proc p { {o -name opt} args } { list o $o args $args }
|% p -opt O 5
|o O args 5
|% p -opt O -1 0
|wrong # args: should be "p |-opt o| ?arg ...?"
|% p -opt O -- -1 0
|o O args {-1 0}

~~ Generated usage description

The error message, automatically generated when the input arguments are
invalid, is updated regarding new options:

 * Pass-by-name arguments (specified using '''-upvar''' option) are
   surrounded by the '&' character.

|% proc p { { v -upvar {} } } { }
|% p
|wrong # args: should be "p &v&"

 * Named arguments are showed how they should be called and surounded
   by the '|' character. If several '''-name''' options have been specified,
   they are grouped together.

|% proc p { { l -name level -name high -value 9 -name byvar -upvar {} } } {}
|% p
|wrong # args: should be "p |-level l|-high|-byvar &l&|"

 * When a default value has been specified, the previously used '&'
   character is also used.

|% proc p { { v -default 0 -name var } a } {}
|% p
|wrong # args: should be "p ?|-var v|? a"

~~ Introspection

The ''info argspec'' command is added to get an argument specification
similar to the used one on proc creation.

|% proc p { a { b 1 } { c -name c -name C -value 1 } } {}
|% info argspec p a
|
|% info argspec p b
|-default 1
|% info argspec p c
|-name c -name C -value 1

~ Implementation

This document proposes the following changes to the Tcl core:

 1. Add ExtendedArgSpec structure which is linked from CompiledLocal
    and contains information about extended argument specification;

 2. Add a flags field in the Proc structure to later identify a proc
    with at least one argument defined with an extended argument
    specification (PROC_HAS_EXT_ARG_SPEC);

 3. Update proc creation to handle the extended argument specification
    and fill the ExtendedArgSpec structure;

 4. Update InitArgsAndLocals to initialize the compiled locals using
    a dedicated function if the PROC_HAS_EXT_ARG_SPEC flag has been
    set on the proc. If unset, the original initialization code is
    still used.

 5. Update ProcWrongNumArgs to generate an appropriate error message
    when an argument has been defined using an extended argument
    specification;

 6. Add ''info argspec'' command;

 7. Update documentation in doc/proc.n;

 8. Update impacted tests and add dedicated tests in tests/proc-enh.test.

~~ Reference Implementation

The reference implementation is available in the tip-457
[http://core.tcl.tk/tcl/timeline?r=tip-457] branch.

The code is licensed under the BSD license.

~ Discussion

This section details some of the envisioned solutions for this feature.

Initial approaches that tried to work with unmodified procedures are
not detailed here for clarity.

~~ Dedicated builtin command

A dedicated command can be used to handle the named arguments, using an
''-option value'' syntax, before calling the target procedures with all
arguments correctly prepared.

|% call -opts myproc -optC foo -optB {5 5} -- "some pos arg"

An implementation of this proposal is available at
[https://github.com/mlafon/tcl/tree/457-CALL-CMD]. This proposal was
abandoned as it was not enough intuitive for users.

~~ Modification in how proc are defined

Tcl-pure procedures can be defined in a way which state that the procedure
will automatically handle ''-option value'' arguments.

|% proc -np myproc { varA { optB defB } { optC defC } { optD defD } args } { .. }
|% myproc -optC foo -optB {5 5} -- "some pos arg"

An other possibility is to support options on arguments and allow name
specification:

|% proc myproc { varA { optB -default defB -name B } args } { .. }
|% myproc a -B b zz

This is the currently proposed solution in this TIP. It requires the
procedures to be modified but allow additional features.

~ Copyright

This document has been placed in the public domain.
