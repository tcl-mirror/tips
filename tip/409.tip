TIP:            409
Title:          Datagram I/O in Tcl
Version:        $Revision: 1.3 $
Author:         Alexandre Ferrieux <alexandre.ferrieux@gmail.com>
Author:         Colin McCormack <colin@chinix.com>
State:          Draft
Type:           Project
Vote:           Pending
Created:        17-Aug-2012
Post-History:   
Keywords:       udp
Obsoletes:      391
Tcl-Version:    8.7

~ Abstract

This TIP adds support for Datagram I/O in Tcl (starting with UDP), with a pure
event approach to packet reception (as opposed to hijacking the existing
channel infrastructure).

~ Rationale

UDP support is a long-awaited feature in Tcl. Some extensions have
traditionally supported it through the channel abstraction. This is of course
doable, but there is a non-negligible cost in both complexity and performance
due to the impedance mismatch between the "fluid" model behind channels and
the "granular" world of packets or datagrams (where boundaries are
significant).  Another discrepancy is the existence of (per-packet) metadata
(like the source address and port of an incoming UDP packet), which does not
fit nicely in the (per-connection) options of the channel API (via
'''fconfigure''').

Once this mismatch is acknowledged, it is easy to identify a better home for
packet I/O in Tcl: let it be a direct event source (for the receive side),
just like Tk or Snack.

Indeed, hooking a callback for packet reception is a natural fit with Tcl's
event-driven tradition, while preserving packet boundaries and easily exposing
per-packet metadata.

Sending is trivially handled by a direct per-packet call (but not disguised as
a '''puts''').  Again, this naturally allows for boundary preservation and
metadata specification.

The script API put forth in this TIP is also designed for easy generalization
to other kinds of packet I/O.  Though only UDP is supported in the reference
implementation, other protocols may be defined, and selected with the
''protocol'' parameter.  Future additions may include:

 * raw IP sockets

 * USB

 * Bluetooth

This TIP asks for UDP-in-the core for two strong reasons:

 * it enables another important core
   feature: asynchronous (event-driven) DNS lookups

 * the C runtime supports it without extra libraries (unlike USB or Bluetooth)

It is thus expected that extension-based support of other protocols will use
the core UDP support (at least) as a syntactic template, minimizing the WTF
effect of random new APIs.

To this effect, the next section describes the common syntax to be followed
for all protocols, be they in the core or not, merely by extending a single
ensemble.  This notably removes the burden of defining a new stub entry for
mundane things like protocol registration.

~ Overall Specification

The new '''datagram''' command creates a "datagram endpoint" of the given
protocol:

 > '''datagram''' ''protocol'' ?''options''?

Following the traditions of Tk and Snack, it returns a Tcl command, which
takes subcommands implementing the needed verbs. An endpoint is thus created
by:

|   set d [datagram protocol ?-option value? ...]

The returned command lives by default in the '''::tcl::datagram''' namespace;
however, the generic ''-name'' option allows it to take a (possibly fully
qualified) user-provided name:

|   datagram protocol -name foo ...

creates (and returns) the command '''foo''' (in the current namespace) to hold the endpoint.

Once created, its configuration can be tweaked by:

|   $d configure -option $value

and retrieved with

|   set value [$d configure -option]

or 

|   set fullconf [$d configure]

To close the endpoint, use:

|   $d close

or

|   $d destroy

or, as in Tk, destroy the command:

|   rename $d {}

or the whole namespace.

Other verbs, and the detailed list of options, are protocol-specific. From now
on, the specification concentrates on the UDP case.  The rationale for ''not''
generalizing much is the feeling that the costs of parameter variability would
largely outweigh the tiny amount of code sharing.

~ The UDP case

With UDP, two things may only be specified on creation:

 - local interface+port
 - (optional) connect() target's address+port

while all the other options may be specified ''both'' on creation or through [[$d configure]].

These creation-only options have the following syntax:

 > set d [['''datagram udp''' ?'''-local''' ''address_port''? ]]

 > set d [['''datagram udp''' ?'''-remote''' ''address_port''? ]]

where ''address_port'' pairs are represented as 2-element Tcl lists.

 > set address_port [list $address $port]

In the case of '''-local''', $address can be specified as "*", meaning INADDR_ANY, and $port can be 0, asking for the OS to select a free port. Thus a dynamic port on all interfaces can be requested with

|   set d [datagram udp -local [list * 0]]

In case of port 0, after creation of the endpoint, the actual port
chosen by the OS can be retrieved with [[$d configure]]:

|   puts "Local port is: [lindex [$d configure -local] 1]"

In the case of '''-remote''', $address and $port must be fully specified.
The semantics, as is well known, is to tell the kernel (a) to forbid
sending to any other destination, and (b) to discard all incoming packets sent
by another source.

~~ Sending a Message

Sending is done, unsurprisingly, with the '''send''' verb:

 > $d '''send''' ''payload'' ?''dest_addr_port''?

where ''dest_addr_port'' is a pair as above.

Its blocking semantics is that of the underlying system calls: it typically
returns immediately, though the hardware may buffer the data for some time,
and delivery is not guaranteed. The ''payload'' is interpreted as a byte array
that holds the entire content of the UDP message to send.

The destination parameter can be omitted if the endpoint has been created
with the '''-remote''' option (connected mode).

~~ Receiving a message

Receiving is done with the '''-listener''' callback:

 > $d '''configure -listener''' ''command_prefix''

Subsequently, when an incoming packet hits Tcl in the event loop, the
''command_prefix'' is called with the endpoint identifier, payload and
metadata:

 > {*}''command_prefix'' $d ''payload'' ''metadata_dict''

where ''payload'' is the byte array of the UDP payload, and ''metadata_dict''
is a dict containing at least two options:

 >   '''-remote''' ''address_port''

 >   '''-local''' ''address_port''

Note that ''command_prefix'' is a single command, possibly with arguments, that will be expanded on invocation (hence it must be a proper list); it is *not* an arbitrary script as in Tk's '''bind'' tradition. 

When ''command_prefix'' is the empty list, the notifier gives up interest in
the underlying UDP socket; this allows to keep the port bound while letting
the OS buffer any incoming packets (up to a configurable limit) without any
script-level handling, while leaving the event loop active.  This is similar
to setting a '''fileevent''' on a channel to the empty string.

~~ Advanced UDP features

The following few verbs and options control extra IP features that are
typically useful in popular UDP applications like media streaming:

 > $d '''configure -sendbuffer''' ''buffersize''

 > $d '''configure -receivebuffer''' ''buffersize''

Set the OS's send (resp. receive) buffer sizes to the given values (in bytes).

 > $d '''join''' ''multiaddr'' ?'''-source''' ''sourceaddr''?

Joins the multicast group ''multiaddr'', optionally using IGMPv3's source
membership target ''sourceaddr''.

 > $d '''leave''' ''multiaddr'' ?'''-source''' ''sourceaddr''?

Leaves the same multicast group with or without source membership.

 > $d '''configure -ttl''' ''ttl''

Sets the TTL of the packet. Some operating systems typically reduce the
default TTL to one for multicast packets; this override may thus come in
handy.

~ Copyright

This document has been placed in the public domain.
