TIP:            250
Title:          Efficient Access to Namespace Variables
Version:        $Revision: 1.3 $
Author:         Will Duquette <will@wjduquette.com>
Author:         miguel sofer <msofer@users.sf.net>
State:          Draft
Type:           Project
Vote:           Pending
Created:        19-Jun-2005
Post-History:   
Tcl-Version:    8.5

~ Abstract

This TIP proposes a new '''namespace''' subcommand, '''namespace
upvar''', to efficiently alias namespace variables into the current
scope.

~ Rationale

A pure-Tcl object system which defines a namespace to contain the
variables for each object instance must either duplicate the object's
method code in each instance namespace, or define the method code such
that it exists in one namespace but accesses data from another.  The
Snit package [http://www.wjduquette.com/snit] does the latter.
Instance variables are declared automatically within each method body
using code like this, where "selfns" is a variable containing the name
of the instance namespace:

| upvar ${selfns}::myvar myvar

The fully-qualified variable name "${selfns}::myvar" must be
recomputed each time the method is called, which is a significant
source of method-call overhead.  This TIP proposes a mechanism for
avoiding many of these costs while also allowing people to write
clearer code.

With '''namespace upvar''', the code would look like this:

| namespace upvar $selfns myvar myvar

The speed gains come from:

   * it avoids building and then destroying a Tcl_Obj for the fully qualified name

   * it avoids parsing the fully qualified name into its namespace/tail components, creating and then destroying the corresponding Tcl_Objs

   * it may reuse a cached namespace in the internal representation of ${selfns}

In addition, the programmer's intention is easier to see in a command

| namespace upvar $selfns var1 var1 var2 var2 var3 var3

than in the currently necessary

| upvar 0 ${selfns}::var1 var1 ${selfns}::var2 var2 ${selfns}::var3 var3

where the fact that all variables come from the same namespace is not so obvious.

~ Specification

The syntax of the new subcommand is as follows:

 > '''namespace upvar''' ''ns otherVar myVar'' ?''otherVar myVar'' ...?

The semantics are identical to the following '''upvar''' call:

 > '''upvar 0''' ''ns''::''otherVar'' ''myVar'' ?''ns''::''otherVar''
   ''myVar''...?

That is, the variable ''otherVar'' in namespace ''ns'' (as resolved from the local scope) is aliased to variable ''myVar'' in the local scope.

~ Reference Implementation

A reference implementation of '''namespace upvar''' is to be provided
by Miguel Sofer.

~ Copyright

This document has been placed in the public domain.
