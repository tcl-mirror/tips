TIP:            217
Title:          Getting Sorted Indices out of Lsort
Version:        $Revision: 1.6 $
Author:         James P. Salsman <james@bovik.org>
State:          Draft
Type:           Project
Vote:           Pending
Created:        26-Aug-2004
Post-History:   
Keywords:       Tcl,lsort,parallel lists
Tcl-Version:    8.4

~ Abstract

An '''-indices''' option is proposed for the '''lsort''' command, returning the indices of the given list's elements in the order that they would have otherwise been sorted.

~ Rationale

When corresponding parallel lists must be accessed in the order given
by sorting them all according to one of them used as a list of keys, it
is necessary to obtain the indices of the key list's elements in the 
order they would be sorted without actually sorting the list.  For 
example, a list of first names and a corresponding list of last names 
can be displayed in side-by-side Tk listboxes, and we may want to 
sort both lists by either one used as the sorting key, or we may want
to simultaniously iterate over both in either order. In order to do so, 
merely sorting a list is unhelpful; we must obtain the indices of the 
key list in the order that its corresponding elements would be sorted.

Tk listboxes, database I/O, and statistics applications often 
involve heavy use of parallel lists.  For this and other reasons, many
programming languages starting at least as early as APL, up to 
present-day numerics-oriented languages such as MATLAB, have included 
the ability to directly obtain the indices required to access a list in 
sorted order.

~ Proposed Specification

The '''lsort''' command shall accept a new option, '''-indices'''.
When '''lsort''' is invoked with this option, it shall return a list 
of integer indices of the elements of the list given as the final
argument to '''lsort''', in the order that the elements would have
been sorted had the '''-indices''' option not been specified.

This means an alternative (though less efficient for single lists) mechanism for producing a sorted list could be:

|set resultList {}
|foreach idx [lsort -indices $sourceList] {
|    lappend resultList [lindex $sourceList $idx]
|}

~ Reference Implementation

Available at http://www.bovik.org/lsort-indices-diff.txt

That reference implementation is a 109-line context diff, involving 
adding 20 lines of code to ''tclCmdIL.c'', no additional memory overhead
and only one additional integer comparison if the new option is not
invoked.

Compared to the following pure Tcl implementation, the reference 
implementation takes just 15% of the execution time for a list of 
50,000 random reals, and just 9% of the execution time for a list 
of 5,000 random reals.  

This pure Tcl implementation was adapted by Richard Suchenwirth from 
an earlier version by the author.

| proc lsort-indices list {
|   if [llength $list] {
|     set i -1
|     foreach e $list {lappend tmp [list [incr i] $e]}
|     foreach e [lsort -index 1 -real $tmp] {lappend res [lindex $e 0]}
|     set res
|   }
| }

~ Proposed Documentation

In the '''lsort''' man page, under '''DESCRIPTION''', change the 
first sentence:

 > "This command sorts the elements of list, returning a new list in
   sorted order."

... to read:

 > "This command sorts the elements of list, and returns a new list in
   sorted order, unless the -indices option is specified, in which
   case a list of integers is returned, corresponding to the indices
   of the given list's elements in the order that they otherwise would
   have been sorted."

Under '''EXAMPLES''', at the end of the section, include the following
lines:

| Obtaining ordered indices:
|
|  % lsort -indices [list a c b]
|  0 2 1
|  % lsort -indices -unique -decreasing -real -index 0 \
|          {{1.2 a} {34.5 b} {34.5 c} {5.6 d}}
|  1 2 0

~ Copyright

This document has been placed in the public domain by the author.
