TIP:            428
Title:          Produce Error Dictionary from 'fconfigure -error'
Version:        $Revision: 1.6 $
Author:         Harald Oehlmann <oehhar@users.sourceforge.net>
Author:         Harald Oehlmann <harald.oehlmann@users.sourceforge.net>
State:          Draft
Type:           Project
Vote:           Pending
Created:        16-Mar-2014
Post-History:   
Keywords:       socket,non-blocking,error reporting,option dictionary
Tcl-Version:    8.7

~ Abstract

This TIP proposes to throw an error message of a non-blocking socket I/O by a command.
This allows to not only access the error message as by '''fconfigure -error''' but also the other error information fields like the error code and to handle the background error in similar ways as other errors.

~ Rationale

The error message of a non-blocking channel command may be retrieved and
cleared by '''fconfigure -error''', but there is no access to the error code.

In addition, the error may not be handled in the TCL-like way using '''catch''' or '''try''' (or just let fail the program), but must be detected by a string comparison.

The '''errorCode''' returned in the option dictionary of '''catch''' gains access to more detailed and machine-readable information about the
nature of the error.
In particular, there are two key aims for having access
to the error code:

   * Returning it together with the error message by a '''return'''. 

   * Use it in a '''switch''' command

~ Proposed Change

The new option

 > '''fconfigure''' ''channel'' '''-throwerror'''

should throw the error which appeared in a non blocking io operation.
It should do nothing, if there was no error.
The error should be cleared.

This is a companion function to '''fconfigure -error''' and could be implemented in any driver, where '''fconfigure -error''' exists.

~ Example

The following example demonstrates the use.
It checks for an error, closes the channel on error and propages the error to the caller:

|if {[catch {fconfigure $h -throwerror} e d]} {
|    catch {close $h}
|    puts "$h:$d"
|    # -> returns "connection refused:-code 1 -level 0 -errorcode {POSIX ECONNREFUSED {connection refused}} -errorinfo {couldn't open socket: connection refused"
|    # fail with the error
|    unset d -level
|    return -options $d $e
|}

~ Alternatives

Revision 1.2 of this TIP proposed to return an error dict like '''d''' in '''catch {code} e d'''.
This approach had the following issues:

   * A new member must be invented to include the error message

   * The standard error mechanisms like '''catch''' may not be used to detect the error occurence. Instead, a comparison of a dict member must be done.

~ Further perspectives

Here are the fconfigure options with similar functionality:

   * '''fconfigure -lasterror''': serial, win only: returns something like the
second component of an errorCode list: '''lindex $::errorCode 1'''

   > * channel must not be closed, serial errors may be temporary.

   * '''fconfigure -error''': socket, all platforms: returns an error message

   > * channel must be closed, no way to recover (with tcp).

   > * '''fconfigure -throwerror''' may also be implemented for the windows serial driver.

~ Implementation

Implementation might be available soon.

~ Copyright

This document has been placed in the public domain.
