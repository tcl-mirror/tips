TIP:            428
Title:          Produce Error Dictionary from 'fconfigure -error'
Version:        $Revision: 1.20 $
Author:         Harald Oehlmann <oehhar@users.sourceforge.net>
Author:         Harald Oehlmann <harald.oehlmann@users.sourceforge.net>
State:          Draft
Type:           Project
Vote:           Pending
Created:        16-Mar-2014
Post-History:   
Keywords:       socket,non-blocking,error reporting,option dictionary
Tcl-Version:    8.7

~ Abstract

This TIP proposes a new method which allows to return the error message and the error code of a background socket error (as reported by '''fconfigure -error'''), similar to the option dictionaries produced by catch and try and consumed by return.

~ Rationale

The error message of a background channel error may be retrieved and
cleared by '''fconfigure -error''', but there is no access to the error code.

In addition, the error may not be handled in the TCL-like way using '''catch''' or '''try''' (or just let fail the program).

Specially the new '''try''' syntax (see example in the man page) is well suited to handle socket errors.
Example:

|try {set h [socket $host $port]}\
|trap {POSIX ECONNREFUSED} {} {
|    # handle not open port
|}

Drivers mostly use POSIX errors to report issues where the error code is more portable than the error message (AFAIK).

To handle an error by '''try''', the error must be thrown.

We are limited to an option to the command '''fconfigure''', as this is implemented within the driver interface.

Throwing the error would change the semantics of '''fconfigure''' and thus should not happen.
Instead, the new '''fconfigure''' operation should return an error dict containing error message and error code.

To finally throw the error, an utility function ('''chan throwerror $h''') may be defined in TCL.
This is not part of this TIP.

~ Proposed Change

The new '''fconfigure''' option

 > '''fconfigure''' ''channel'' '''-options'''

should return a dict like the command '''catch cmd err dict''':

   *   if there is no error, it should return '''-code 0 -message ""'''

   *   if there is an error, it should return '''-code 1 -errorcode errorCode -message errorMessage'''

In all other aspects it works like '''fconfigure channel -error''':

   *   Implemented for socket drivers

   *   Reports background errors (ex:: async connect errors)

   *   Clears the error

~ Example

Usage example with failing async connect:

|% set h [connect -async localhost 30001]
|d00000af
|% fileevent $h writable {set x 1}
|% vwait x
|% fconfigure $h -options
-code 1 -errorcode {POSIX ECONNREFUSED {connection refused}} -message {connection refused}
|% close $h

The following example demonstrates the implementation of '''chan throwerror''' eg to throw the error from the provided dict.

|proc throwerror {h} {
|    set d [fconfigure $h -options]
|    return -options $d [dict get $d -message]
|}

~ Alternatives

   *   Revision 1.11 of this TIP proposed to really throw the error.

   *   The dict member '''-message''' is non-standard and should eventually be changed.

   *   The name of the option '''-options''' is not intuitive. Any intuitive name like '''-erroroptions''' would make abreviations of the exiting option '''-error''' invalid which raises incompatibility. '''-options''' is taken from the '''return''' command. 

   *   Reinhard Max proposed, to use '''fconfigure $h -error ?variable name?'''. If '''variable name''' is given, the error dict is written into this variable while the error message is still returned. This is similar to '''catch {} err dict''' where '''err''' is returned and '''dict''' is set.

~ Implementation

The tip is implemented in fossil branch '''tip-428'''.
~ Copyright

This document has been placed in the public domain.
